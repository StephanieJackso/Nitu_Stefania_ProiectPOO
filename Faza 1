#include <iostream>
#include <string>
#include <vector>

class AbstractPix {
public:
    virtual int getCerneala() const = 0;
    virtual void afisareDetalii() const = 0;
    virtual ~AbstractPix() {}
};

class Pix : public AbstractPix {
private:
    int* idPix;
    static int totalPixuri;
    int capacitateMaximaCerneala;

public:
    Pix(int id, int cerneala) : idPix(new int(id)), capacitateMaximaCerneala(cerneala) {
        totalPixuri++;
    }
    int getCerneala() const {
        return capacitateMaximaCerneala;
    }
    Pix(int id) : Pix(id, 100) {}

    Pix() : Pix(0, 100) {}

    ~Pix() {
        delete idPix;
    }
    friend void functiePrietena(const Pix& pix);
    Pix& operator=(const Pix& other) {
        if (this != &other) {
            delete idPix;
            idPix = new int(*(other.idPix));
            capacitateMaximaCerneala = other.capacitateMaximaCerneala;
        }
        return *this;
    }
    Pix operator+(const Pix& other) const {
        return Pix(*idPix + *(other.idPix), capacitateMaximaCerneala + other.capacitateMaximaCerneala);
    }
    void afisareDetalii() const override {
        std::cout << "ID: " << *(idPix) << ", Cerneala: " << capacitateMaximaCerneala << std::endl;
    }
    int getCerneala() const override {
        return capacitateMaximaCerneala;
    }
    static int getTotalPixuri() {
        return totalPixuri;
    }
    int getIdPix() const {
        return *idPix;
    }

    int getCerneala()  const override {
        return capacitateMaximaCerneala;
    }

    Pix operator-(const Pix& other) const {
        return Pix(*idPix - *(other.idPix), capacitateMaximaCerneala - other.capacitateMaximaCerneala);
    }
    friend std::ostream& operator<<(std::ostream& os, const Pix& pix);
};

std::ostream& operator<<(std::ostream& os, const Pix& pix) {
    os << "ID: " << *(pix.idPix) << ", Cerneala: " << pix.capacitateMaximaCerneala;
    return os;
}

int Pix::totalPixuri = 0;

class Carte {
private:
    int* numarPagini;
    static const std::string material;
    double greutate;

public:
    Carte(int p, double g) : numarPagini(new int(p)), greutate(g) {}

    Carte(int p) : Carte(p, 1.5) {}

    Carte() : Carte(100, 1.5) {}

    ~Carte() {
        delete numarPagini;
    }
    Carte& operator=(const Carte& other) {
        if (this != &other) {
            delete numarPagini;
            numarPagini = new int(*(other.numarPagini));
            greutate = other.greutate;
        }
        return *this;
    }
    Carte operator-(const Carte& other) const {
        return Carte(*numarPagini - *(other.numarPagini), greutate - other.greutate);
    }

    Carte(const Carte& other) : numarPagini(new int(*(other.numarPagini))), greutate(other.greutate) {}

    int getNumarPagini() const {
        return *numarPagini;
    }

    double getGreutate() const {
        return greutate;
    }

    static std::string getMaterial() {
        return material;
    }
    friend std::ostream& operator<<(std::ostream& os, const Carte& carte);
};

std::ostream& operator<<(std::ostream& os, const Carte& carte) {
    os << "Numar pagini: " << *(carte.numarPagini) << ", Greutate: " << carte.greutate;
    return os;
};


const std::string Carte::material = "Hartie";

class Calculator: public AbstractCalculator {
private:
    double* valoare;
    static const char marca;
    bool alimentareSolara;

public:
    Calculator(double v, bool solar) : valoare(new double(v)), alimentareSolara(solar) {}

    Calculator(double v) : Calculator(v, true) {}

    Calculator() : Calculator(0.0, true) {}

    ~Calculator() {
        delete valoare;
    }
    Calculator& operator=(const Calculator& other) {
        if (this != &other) {
            delete valoare;
            valoare = new double(*(other.valoare));
            alimentareSolara = other.alimentareSolara;
        }
        return *this;
    }
    Calculator operator*(const Calculator& other) const {
        return Calculator(*valoare * *(other.valoare), alimentareSolara && other.alimentareSolara);
    }
    double getValoare() const override {
        return *valoare;
    }

    bool getAlimentareSolara() const override {
        return alimentareSolara;
    }

    void afisareDetalii() const override {
        std::cout << "Valoare: " << *(valoare) << ", Alimentare solara: " << alimentareSolara << std::endl;
    }
    Calculator(const Calculator& other) : valoare(new double(*(other.valoare))), alimentareSolara(other.alimentareSolara) {}

    double getValoare() const {
        return *valoare;
    }

    void setValoare(double v) {
        *valoare = v;
    }

    bool getAlimentareScolara() const {
        return alimentareSolara;
    }

    static char getMarca() {
        return marca;
    }

    friend std::ostream& operator<<(std::ostream& os, const Calculator& calculator);
};

std::ostream& operator<<(std::ostream& os, const Calculator& calculator) {
    os << "Valoare: " << *(calculator.valoare) << ", Alimentare solara: " << calculator.alimentareSolara;
    return os;
};

const char Calculator::marca = 'C';
void procesarePix(const Pix& pix) {
    std::cout << "Procesare Pix: ID=" << pix.getIdPix() << ", Cerneala=" << pix.getCerneala() << std::endl;
}

void procesareCalculator(const Calculator& calc) {
    std::cout << "Procesare Calculator: Valoare=" << calc.getValoare() << ", Alimentare solara=" << calc.getAlimentareScolara() << std::endl;
}
void functiePrietena(const Pix& pix) {
    std::cout << "Functie Prietena Pix: ID=" << pix.getIdPix() << ", Cerneala=" << pix.getCerneala() << std::endl;
}

std::istream& operator>>(std::istream& is, Pix& pix) {
    int id, cerneala;
    std::cout << "Introduceti ID-ul si cantitatea de cerneala pentru Pix: ";
    is >> id >> cerneala;
    pix = Pix(id, cerneala);
    return is;
}

std::istream& operator>>(std::istream& is, Carte& carte) {
    int pagini;
    double greutate;
    std::cout << "Introduceti numarul de pagini si greutatea pentru Carte: ";
    is >> pagini >> greutate;
    carte = Carte(pagini, greutate);
    return is;
}

std::istream& operator>>(std::istream& is, Calculator& calculator) {
    double valoare;
    bool alimentareSolara;
    std::cout << "Introduceti valoarea si 1 daca are alimentare solara, altfel 0 pentru Calculator: ";
    is >> valoare >> alimentareSolara;
    calculator = Calculator(valoare, alimentareSolara);
    return is;
}

class AbstractCalculator {
public:
    virtual double getValoare() const = 0;
    virtual bool getAlimentareSolara() const = 0;
    virtual void afisareDetalii() const = 0;
    virtual ~AbstractCalculator() {}
};
class ObiectComplet {
private:
    std::vector<AbstractPix*> pixVector;
    std::string numeObiect;
    std::string dataAchizitie;
public:
    ObiectComplet(const std::vector<Pix>& pixVec, double val, const std::string& nume, bool act, const std::string& data,
        const std::vector<Carte>& carteVec = {}, const Calculator& calc = Calculator(), bool calcActive = false) {
        std::vector<Pix> pixVector1 = { Pix(10, 50), Pix(11, 75) };
        std::vector<Carte> carteVector1 = { Carte(150), Carte(200, 2.0) };
        Calculator calculator1(30.2);
    }
    ObiectComplet& operator=(const ObiectComplet& o) {
        if (this != &o) {
            pixVector = o.pixVector;
            numeObiect = o.numeObiect;
            dataAchizitie = o.dataAchizitie;
        }
        return *this;
    }
    const std::vector<AbstractPix*>& getPixVector() const {
        return pixVector;
    }
    void setPixVector(const std::vector<Pix>& pixVec) {
        for (AbstractPix* pixPtr : pixVector) {
            delete pixPtr; 
        }
        pixVector.clear();
        for (const Pix& pix : pixVec) {
            pixVector.push_back(new Pix(pix)); 
        }
    }
    void afisareDetalii() const {
        std::cout << "Detalii ObiectComplet:\n";
        std::cout << "Obiecte Pix:\n";
        for (const auto& pix : pixVector) {
            std::cout << pix << std::endl;
        }
    }
};

class PixSpecial : public Pix {
private:
    std::string culoare;
public:
    PixSpecial(int id, int cerneala, const std::string& col)
        : Pix(id, cerneala), culoare(col) {
        std::cout << "Obiect PixSpecial creat." << std::endl;
    }
    const std::string& getCuloare() const {
        return culoare;
    }
    void setCuloare(const std::string& col) {
        culoare = col;
    }
    void afisareDetaliiPixSpecial() const {
        std::cout << "Detalii PixSpecial - ID: " << getIdPix()
            << ", Cerneala: " << getCerneala()
            << ", Culoare: " << culoare << std::endl;
    }
};

class CalculatorAdvanced : public Calculator {
private:
    int memorieRAM;
public:
    CalculatorAdvanced(double v, bool solar, int ram) : Calculator(v, solar), memorieRAM(ram) {
        std::cout << "Obiect CalculatorAdvanced creat." << std::endl;
    }
    int getMemorieRAM() const {
        return memorieRAM;
    }
    void setMemorieRAM(int ram) {
        memorieRAM = ram;
    }
};

int main() {
    Pix pix1(1, 90);
    Pix pix2(2);
    Pix pix3;

    std::cout << "Total Pixuri: " << Pix::getTotalPixuri() << std::endl;

    Carte carte1(200, 2.0);
    Carte carte2(150);
    Carte carte3;

    std::cout << "Material: " << Carte::getMaterial() << std::endl;

    Calculator calculator1(50.5, false);
    Calculator calculator2(30.2);
    Calculator calculator3;

    std::cout << "Marca: " << Calculator::getMarca() << std::endl;
    Pix pix4 = pix1 + pix2;
    Carte carte4 = carte1 - carte2;
    Calculator calculator4 = calculator1 * calculator2;

    functiePrietena(pix1);

    std::cout << "Total Pixuri: " << Pix::getTotalPixuri() << std::endl;
    std::vector<Pix> pixVector(3);
    std::vector<Carte> carteVector(3);
    std::vector<Calculator> calculatorVector(3);
    for (int i = 0; i < 3; ++i) {
        std::cin >> pixVector[i];
        std::cin >> carteVector[i];
        std::cin >> calculatorVector[i];
    }
    std::cout << "Obiecte din vectorul de Pix:\n";
    for (const auto& pix : pixVector) {
        std::cout << pix << std::endl;
    }

    std::cout << "Obiecte din vectorul de Carte:\n";
    for (const auto& carte : carteVector) {
        std::cout << carte << std::endl;
    }

    std::cout << "Obiecte din vectorul de Calculator:\n";
    for (const auto& calculator : calculatorVector) {
        std::cout << calculator << std::endl;
    }
    const int rows = 2;
    const int cols = 2;
    Calculator calculatorMatrix[rows][cols];

    std::cout << "Introduceti obiectele pentru matricea de Calculator:\n";
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            std::cin >> calculatorMatrix[i][j];
        }
    }
    std::cout << "Obiecte din matricea de Calculator:\n";
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            std::cout << calculatorMatrix[i][j] << " ";
        }
        std::cout << std::endl;
    }
    std::vector<Pix> pixVector1 = { Pix(10, 50), Pix(11, 75) };
    std::vector<Pix> pixVector2 = { Pix(12, 30), Pix(13, 40) };
    std::vector<Pix> pixVector3 = { Pix(10, 50), Pix(11, 75) };
    ObiectComplet obiect1(pixVector1, 20.5, "Obiect1", true, "2023-01-01", {}, Calculator(), false);
    PixSpecial pixSpecial(3, 120, "Albastru");
    CalculatorAdvanced calcAdvanced(75.0, true, 8);
    Pix pixUpcasted = static_cast<Pix>(pixSpecial);
    Calculator calcUpcasted = static_cast<Calculator>(calcAdvanced);
    std::cout << "Pix Special: " << pixSpecial << ", Culoare: " << pixSpecial.getCuloare() << std::endl;
    std::cout << "Calculator Advanced: " << calcAdvanced << ", Memorie RAM: " << calcAdvanced.getMemorieRAM() << " GB"
        << std::endl;
    std::cout << "Upcasted Pix: " << pixUpcasted << std::endl;
    std::cout << "Upcasted Calculator: " << calcUpcasted << std::endl;
    std::vector<AbstractPix*> pixObjects;
    pixObjects.push_back(new Pix(1, 90));
    pixObjects.push_back(new Pix(2));
    pixObjects.push_back(new Pix(3, 80));
    for (const auto& pixPtr : pixObjects) {
        pixPtr->afisareDetalii();
    }
    for (const auto& pixPtr : pixObjects) {
        delete pixPtr;
    }
    return 0;
}
